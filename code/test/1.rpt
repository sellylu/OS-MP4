==8972== Memcheck, a memory error detector
==8972== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==8972== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==8972== Command: ../build.linux/nachos -f
==8972== 
==8972== Syscall param write(buf) points to uninitialised byte(s)
==8972==    at 0x98E8A3: __write_nocancel (in /lib/libc-2.12.so)
==8972==    by 0x804CCB2: WriteFile(int, char*, int) (sysdep.cc:366)
==8972==    by 0x8052E11: Disk::WriteRequest(int, char*) (disk.cc:143)
==8972==    by 0x805C5CF: SynchDisk::WriteSector(int, char*) (synchdisk.cc:79)
==8972==    by 0x805A8A8: FileHeader::WriteBack(int) (filehdr.cc:186)
==8972==    by 0x805ADB3: FileSystem::FileSystem(bool) (filesys.cc:109)
==8972==    by 0x8053C58: Kernel::Initialize() (kernel.cc:116)
==8972==    by 0x8055744: main (main.cc:294)
==8972==  Address 0x41608d4 is 12 bytes inside a block of size 128 alloc'd
==8972==    at 0x4008465: operator new(unsigned int) (vg_replace_malloc.c:327)
==8972==    by 0x805A4C4: FileHeader::Allocate(PersistentBitmap*, int) (filehdr.cc:105)
==8972==    by 0x805AC8C: FileSystem::FileSystem(bool) (filesys.cc:100)
==8972==    by 0x8053C58: Kernel::Initialize() (kernel.cc:116)
==8972==    by 0x8055744: main (main.cc:294)
==8972== 
==8972== 
==8972== HEAP SUMMARY:
==8972==     in use at exit: 648 bytes in 2 blocks
==8972==   total heap usage: 154 allocs, 152 frees, 24,608 bytes allocated
==8972== 
==8972== LEAK SUMMARY:
==8972==    definitely lost: 0 bytes in 0 blocks
==8972==    indirectly lost: 0 bytes in 0 blocks
==8972==      possibly lost: 0 bytes in 0 blocks
==8972==    still reachable: 648 bytes in 2 blocks
==8972==         suppressed: 0 bytes in 0 blocks
==8972== Rerun with --leak-check=full to see details of leaked memory
==8972== 
==8972== For counts of detected and suppressed errors, rerun with: -v
==8972== Use --track-origins=yes to see where uninitialised values come from
==8972== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 18 from 8)
